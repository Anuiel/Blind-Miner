local board_width = 10
local board_height = 10
local x_edge = 10
local y_edge = 100
local blocksize = 65

local red_color = hash("red")
local blue_color = hash("blue")
local gray_color = hash("gray")

local grabed_limit = 100

function init(self)

	self.board = {}
	self.selected = {}

	self.red = 0
	self.blue = 0
	
	self.current_ball = nil
	self.play = false
	self.color = "none"
	self.score = 0

	self.grabed_ball = nil
	self.grabed_counter = 0
	msg.post(".", "acquire_input_focus")
	msg.post("#", "start_level")
end

local function build_board(self)
	math.randomseed(os.time())
	local board = {}
	local selected = {}
	local pos = vmath.vector3()
	local x = 0
	local y = 0
	for x = 0,board_width-1 do
		pos.x = x_edge + blocksize / 2 + blocksize * x
		board[x] = {}
		selected[x] = {}
		for y = 0,board_height-1 do 
			pos.y = y_edge + blocksize / 2 + blocksize * y
			local color = red_color
			self.red = self.red + 1
			if math.random() < 0.5 then
				color = blue_color
				self.red = self.red - 1
				self.blue = self.blue + 1
			end
			local id = factory.create("#ball_factory", pos, null, { color = color })
			board[x][y] = {id = id, x = x, y = y, color = color}
			selected[x][y] = false
		end
	end
	self.board = board
	self.selected = selected
end

local function reload(self)
	math.randomseed(os.time())
	local pos = vmath.vector3()
	local x = 0
	local y = 0
	for x = 0,board_width-1 do
		pos.x = x_edge + blocksize / 2 + blocksize * x
		for y = 0,board_height-1 do 
			pos.y = y_edge + blocksize / 2 + blocksize * y
			local color = red_color
			self.red = self.red + 1
			if math.random() < 0.5 then
				color = blue_color
				self.red = self.red - 1
				self.blue = self.blue + 1
			end
			if self.board[x][y] == nil then 
				local id = factory.create("#ball_factory", pos, null, { color = color })
				self.board[x][y] = {id = id, x = x, y = y, color = color}
			else 
				msg.post(self.board[x][y].id, "set_color", {color = color})
			end
			self.board[x][y].color = color
			self.selected[x][y] = false
		end
	end
end

function on_message(self, message_id, message, sender)
	if message_id == hash("start_level") then 
		build_board(self)
		self.play = false
		self.score = 0
		self.grabed_counter = 0
		if self.grabed_ball ~= nil then 
			msg.post(self.grabed_ball, "remove")
			self.grabed_ball = nil
		end
	elseif message_id == hash("reload_level") then 
		self.play = false
		self.score = 0
		self.grabed_counter = 0
		if self.grabed_ball ~= nil then 
			msg.post(self.grabed_ball, "remove")
			self.grabed_ball = nil
		end
		self.red = 0
		self.blue = 0
		reload(self)
		for x = 0,board_width-1 do 
			for y = 0,board_height-1 do
				msg.post(self.board[x][y].id, "hide")
				msg.post(self.board[x][y].id, "zoom_on_release")
			end
		end
		self.color = "none"
	elseif message_id == hash("start_round") then 
		for x = 0,board_width-1 do 
			for y = 0,board_height-1 do
				msg.post(self.board[x][y].id, "show")
			end
		end
	elseif message_id == hash("end_round") then 
		for x = 0,board_width-1 do 
			for y = 0,board_height-1 do
				msg.post(self.board[x][y].id, "hide")
			end
		end
		self.play = true
	end
end

function update(self, dt)
	if (self.red == self.score and self.color == red_color) 
	or (self.blue == self.score and self.color == blue_color)
	or (self.red == 0 and self.blue == 0 and self.play) then 
		self.play = false
		self.score = 0
		msg.post("overlay#main", "game_over")
		sound.play("/board#win", {gain=0.8})
	end
end

function on_input(self, action_id, action)
	if action_id == hash("mayhem") and self.play then 
		for i = 0,3 do 
			sound.play("/board#yeet", {delay = i / 10, speed = 1, gain=0.5})
		end
		for x = 0,board_width-1 do 
			for y = 0,board_height-1 do 
				if self.board[x][y] ~= nil then 
					msg.post(self.board[x][y].id, "remove")
					self.board[x][y] = nil
				end
			end
		end
		self.play = false
	end
	
	if self.grabed_ball ~= nil then 
		if action_id == hash("shift") and action.pressed then 
			sound.play("/board#yeet", {speed = 1, gain=0.5})
			msg.post(self.grabed_ball, "remove")
			self.grabed_counter = self.grabed_counter + 1
			self.grabed_ball = nil
		else 
			msg.post(self.grabed_ball, "move_to", {x = action.x, y = action.y})
		end
		return
	end
	
	if action_id == hash("touch") and self.play then
		local x = math.floor((action.x - x_edge) / blocksize)
		local y = math.floor((action.y - y_edge) / blocksize)

		if x < 0 or x >= board_width or y < 0 or y >= board_height or self.board[x][y] == nil then
			if self.current_ball ~= nil then 
				msg.post(self.current_ball.id, "zoom_on_release")
			end
			self.current_ball = nil
			return
		end
		if action.released then 
			if self.current_ball ~= nil then
				msg.post(self.current_ball.id, "zoom_on_release")
				self.current_ball = nil
			end
			sound.play("/board#tap", {gain=0.25})
			if self.color == "none" then 
				self.color = self.board[x][y].color
				self.selected[x][y] = true
				msg.post(self.board[x][y].id, "show")
				msg.post("overlay#main", "score_update", {amount = 1})
				self.score = self.score + 1
			else
				if self.board[x][y].color == self.color then
					if not self.selected[x][y] then  
						self.selected[x][y] = true
						msg.post(self.board[x][y].id, "show")
						msg.post("overlay#main", "score_update", {amount = 1})
						self.score = self.score + 1
					end
				else
					self.play = false
					msg.post(self.board[x][y].id, "show")
					msg.post("overlay#main", "game_over")
					sound.play("/board#lose", {speed = 1, gain=0.8})
				end 
			end
		else
			if self.current_ball ~= nil and self.current_ball ~= self.board[x][y] then
				print("YEP")
				msg.post(self.current_ball.id, "zoom_on_release")
			end
			self.current_ball = self.board[x][y]
			msg.post(self.current_ball.id, "zoom_on_press")
		end
	elseif action_id == hash("grab") and self.play and self.grabed_ball == nil then 
		local x = math.floor((action.x - x_edge) / blocksize)
		local y = math.floor((action.y - y_edge) / blocksize)

		if x < 0 or x >= board_width or y < 0 or y >= board_height or self.board[x][y] == nil then
			return
		end
		if self.selected[x][y] then 
			msg.post("overlay#main", "grab_color")
			return
		end
		if self.grabed_counter < grabed_limit then
			if self.board[x][y].color == red_color then 
				self.red = self.red - 1
			else
				self.blue = self.blue - 1
			end
			self.grabed_ball = self.board[x][y].id
			self.board[x][y] = nil
		else
			msg.post("overlay#main", "to_much_grab")
		end
	end
end
